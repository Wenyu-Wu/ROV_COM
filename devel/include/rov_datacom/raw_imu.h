// Generated by gencpp from file rov_datacom/raw_imu.msg
// DO NOT EDIT!


#ifndef ROV_DATACOM_MESSAGE_RAW_IMU_H
#define ROV_DATACOM_MESSAGE_RAW_IMU_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rov_datacom
{
template <class ContainerAllocator>
struct raw_imu_
{
  typedef raw_imu_<ContainerAllocator> Type;

  raw_imu_()
    : time(0)
    , acc()
    , gyro()
    , mag()  {
      acc.assign(0.0);

      gyro.assign(0.0);

      mag.assign(0.0);
  }
  raw_imu_(const ContainerAllocator& _alloc)
    : time(0)
    , acc()
    , gyro()
    , mag()  {
  (void)_alloc;
      acc.assign(0.0);

      gyro.assign(0.0);

      mag.assign(0.0);
  }



   typedef uint32_t _time_type;
  _time_type time;

   typedef boost::array<double, 3>  _acc_type;
  _acc_type acc;

   typedef boost::array<double, 3>  _gyro_type;
  _gyro_type gyro;

   typedef boost::array<double, 3>  _mag_type;
  _mag_type mag;





  typedef boost::shared_ptr< ::rov_datacom::raw_imu_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rov_datacom::raw_imu_<ContainerAllocator> const> ConstPtr;

}; // struct raw_imu_

typedef ::rov_datacom::raw_imu_<std::allocator<void> > raw_imu;

typedef boost::shared_ptr< ::rov_datacom::raw_imu > raw_imuPtr;
typedef boost::shared_ptr< ::rov_datacom::raw_imu const> raw_imuConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rov_datacom::raw_imu_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rov_datacom::raw_imu_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rov_datacom::raw_imu_<ContainerAllocator1> & lhs, const ::rov_datacom::raw_imu_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.acc == rhs.acc &&
    lhs.gyro == rhs.gyro &&
    lhs.mag == rhs.mag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rov_datacom::raw_imu_<ContainerAllocator1> & lhs, const ::rov_datacom::raw_imu_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rov_datacom

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rov_datacom::raw_imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rov_datacom::raw_imu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rov_datacom::raw_imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rov_datacom::raw_imu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rov_datacom::raw_imu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rov_datacom::raw_imu_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rov_datacom::raw_imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "664714df4d0d5aab2c4e8d96fd461349";
  }

  static const char* value(const ::rov_datacom::raw_imu_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x664714df4d0d5aabULL;
  static const uint64_t static_value2 = 0x2c4e8d96fd461349ULL;
};

template<class ContainerAllocator>
struct DataType< ::rov_datacom::raw_imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rov_datacom/raw_imu";
  }

  static const char* value(const ::rov_datacom::raw_imu_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rov_datacom::raw_imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 time\n"
"float64[3] acc\n"
"float64[3] gyro\n"
"float64[3] mag\n"
;
  }

  static const char* value(const ::rov_datacom::raw_imu_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rov_datacom::raw_imu_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.acc);
      stream.next(m.gyro);
      stream.next(m.mag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct raw_imu_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rov_datacom::raw_imu_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rov_datacom::raw_imu_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time);
    s << indent << "acc[]" << std::endl;
    for (size_t i = 0; i < v.acc.size(); ++i)
    {
      s << indent << "  acc[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.acc[i]);
    }
    s << indent << "gyro[]" << std::endl;
    for (size_t i = 0; i < v.gyro.size(); ++i)
    {
      s << indent << "  gyro[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.gyro[i]);
    }
    s << indent << "mag[]" << std::endl;
    for (size_t i = 0; i < v.mag.size(); ++i)
    {
      s << indent << "  mag[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.mag[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROV_DATACOM_MESSAGE_RAW_IMU_H
